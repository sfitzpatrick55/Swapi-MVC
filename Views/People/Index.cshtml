@model ResultsViewModel<PeopleViewModel> // Declaring to the view that this Model type is ResultsViewModel

@{
    ViewData["Title"] = "People";
}

<h1 class="text-center">People Index</h1>
@if (Model.Results?.Count() > 0) // Accessing the Results property, using the null conditional acccess operator (?), access the Count() method only if Results is not null. If Results is null it exits as false. Then validates that the given count is greater than 0
{
    <div class="d-flex flex-row flex-wrap">
        @foreach (var person in Model.Results) // Foreach loop through all person objects in Results, displays Name, Mass, Height, and Year Born 
        {
            <div class="item-container">
                <a asp-action="Person" asp-route-id="@person.Id" class="item">
                    <h4>@person.Name</h4> 
                    <div class="item-traits">
                        <p>Mass: @person.Mass</p>
                        <p>Height: @person.Height</p>
                        <p>Born: @person.BirthYear</p>
                    </div>
                </a>
            </div>
        }
    </div>
    
    <div class="d-flex flex-row justify-content-between p-2">
        @if (Model.Previous is not null)
        {
            <a asp-action="Index" asp-route-page="@Model.PreviousPageNum">Previous</a>
        }
        else
        {
            <span></span>
        }
        @if (Model.Next is not null)
        {
            <a asp-action="Index" asp-route-page="@Model.NextPageNum">Next</a>
        }
    </div>
}
else
{
    <p>There are no results associated with this page number, sorry. Please check the page number and try again.</p> // This will display if user enters an invalid page number
}